dnl Copyright (c) 2016 Intel Corporation. All rights reserved.
dnl This software is available to you under the BSD license.
dnl
dnl This file is part of the Sandia OpenSHMEM software package. For license
dnl information, see the LICENSE file in the top level directory of the
dnl distribution.
dnl

#ifndef SHMEM_FUNCTION_ATTRIBUTES
#  if SHMEM_HAVE_ATTRIBUTE_VISIBILITY == 1
#     define SHMEM_FUNCTION_ATTRIBUTES __attribute__((visibility("default")))
#  else
#     define SHMEM_FUNCTION_ATTRIBUTES
#  endif
#endif

SHMEM_FUNCTION_ATTRIBUTES double SHPRE()shmemx_wtime(void);
SHMEM_FUNCTION_ATTRIBUTES char* SHPRE()shmemx_nodename(void);

SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_getmem_ct(shmemx_ct_t ct, void *target, const void *source, size_t len, int pe);
SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_putmem_ct(shmemx_ct_t ct, void *target, const void *source, size_t len, int pe);
SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_ct_create(shmemx_ct_t *ct);
SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_ct_free(shmemx_ct_t *ct);
SHMEM_FUNCTION_ATTRIBUTES long SHPRE()shmemx_ct_get(shmemx_ct_t ct);
SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_ct_set(shmemx_ct_t ct, long value);
SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_ct_wait(shmemx_ct_t ct, long wait_for);

SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_register_gettid(uint64_t (*gettid_fn)(void));
SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_register_yield(void (*yield_fn)(int));
SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_register_getultinfo(void (*getultinfo_fn)(int *, uint64_t *));
SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_register_get_thread_handle(void* (*get_thread_handle_fn)(void));
SHMEM_FUNCTION_ATTRIBUTES int SHPRE()shmemx_get_next_thread(void **next_thread);
SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_thread_scheduler_init(uint64_t num_hw_threads, uint64_t num_ul_threads, int *priority_list);
SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_thread_scheduler_finalize(void);
SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_thread_register(void);
SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_thread_unregister(void);

/* Performance Counter Query Routines */
SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_pcntr_get_issued_write(shmem_ctx_t ctx, uint64_t *cntr_value);
SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_pcntr_get_issued_read(shmem_ctx_t ctx, uint64_t *cntr_value);
SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_pcntr_get_completed_write(shmem_ctx_t ctx, uint64_t *cntr_value);
SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_pcntr_get_completed_read(shmem_ctx_t ctx, uint64_t *cntr_value);
SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_pcntr_get_completed_target(uint64_t *cntr_value);
SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_pcntr_get_all(shmem_ctx_t ctx, shmemx_pcntr_t *pcntr);
